{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","rows","columns","moves","playerTurn","resetBoard","setState","winner","getPiece","x","y","filter","item","getWinningMovesForVelocity","xPos","yPos","xVelocity","yVelocity","winningMoves","player","delta","checkX","checkY","checkPiece","push","checkForWin","velocities","i","length","element","addMove","nextPlayerTurn","availableYPosition","position","concat","this","rowViews","row","columnViews","column","piece","onClick","style","width","height","backgroundColor","display","padding","cursor","borderRadius","flex","border","undefined","flexDirection","left","right","top","bottom","zIndex","justifyContent","alignItems","fontSize","props","Object","assign","styles","container","renderBoard","React","Component","pading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb509ea9.chunk.js","sourcesContent":["import React from \"react\";\nimport './App.css';\nexport default class App extends React.Component{\n  state = { //set the default values of the game\n    rows: 6, \n    columns: 7,\n    moves:[],\n    playerTurn: \"red\",\n  };\n\n  resetBoard= () => { //reset board once game is done\n    this.setState({ moves: [], winner: null});\n  }\n\n  getPiece=(x,y) => { //get the pieces to set later on which player they belong to\n    const list = this.state.moves.filter((item) => {\n      return (item.x === x && item.y === y);\n    })\n    return list[0];\n  }\n\n  getWinningMovesForVelocity = (xPos, yPos, xVelocity, yVelocity) => { //function allows for checking of diagnal, horizontal and vertical win using vectors\n    const winningMoves = [{x: xPos, y: yPos}];\n    const player = this.getPiece(xPos, yPos).player;\n\n\n\n    for (let delta = 1; delta<=3; delta+=1){//checking for anything positive (+ve x piece, +ve y piece or +ve x and y (diagonal))\n      const checkX = xPos+xVelocity*delta;\n      const checkY = yPos+yVelocity*delta;\n\n      const checkPiece =this.getPiece(checkX,checkY);\n      if (checkPiece && checkPiece.player === player) { //piece to winngMoves for that player to later check if there's 4 together\n        winningMoves.push({x: checkX,y: checkY});\n      }else{\n        break;\n      }\n    }\n\n    for (let delta = -1; delta>=-3; delta-=1){//checking for anything positive (-ve x piece, -ve y piece or -ve x and y (diagonal))\n      const checkX = xPos+xVelocity*delta;\n      const checkY = yPos+yVelocity*delta;\n\n      const checkPiece =this.getPiece(checkX,checkY);\n      if (checkPiece && checkPiece.player === player) {\n        winningMoves.push({x: checkX,y: checkY});\n      }else{\n        break;\n      }\n    }\n\n    return winningMoves;\n\n  }\n\n  checkForWin = (x,y) => {//function for checxking every time a piece is dropped to see if there's a winner\n    const velocities=[{x:1,y:0}, {x:0,y:1}, {x:-1,y:1}, {x:1,y:1}];\n    for (let i = 0; i < velocities.length; i++) {\n      const element = velocities[i];\n      const winningMoves = this.getWinningMovesForVelocity(x,y,element.x,element.y);\n      if(winningMoves.length>3){\n        this.setState({winner: this.getPiece(x,y).player, winningMoves});//set winner either red or yellow\n      }else if(this.state.moves.length>=42){//if no one wins, set winner to no one\n        this.setState({winner: \"No One\"});\n      }\n      \n    }\n\n\n  }\n\n  addMove = (x) => {//function for switching player turn every round and adding buttons to the board\n    const {playerTurn} = this.state;\n    const nextPlayerTurn = playerTurn === 'red' ? 'yellow' : 'red';\n    let availableYPosition = null;\n    for (let position = this.state.rows-1; position >=0; position--) {\n      if(!this.getPiece(x,position)){\n        availableYPosition=position;\n        break;\n      }\n    }\n    if(availableYPosition!=null){\n      this.setState({ moves: this.state.moves.concat({x, y: availableYPosition, player: playerTurn}), playerTurn: nextPlayerTurn}, () => this.checkForWin(x,availableYPosition,playerTurn));\n    }\n  }\n\n  renderBoard() {//render the connect4 board\n    const {winner}= this.state;\n    const rowViews =[];\n    for (let row =0; row< this.state.rows; row += 1) {\n      const columnViews = [];\n      for (let column =0; column< this.state.columns; column += 1){\n        const piece = this.getPiece(column, row);\n        columnViews.push(//everytime pointer is clicked in a certain column, add button the the bootom most position\n          <div onClick={() => {this.addMove(column, row)}} style={{ width: \"7vw\", height: \"7vw\", backgroundColor: 'lightblue', display: \"flex\", padding: 5, cursor: \"pointer\"}}>\n            <div style={{ borderRadius: \"50%\", backgroundColor: 'white', flex: 1, padding: 3, display: \"flex\"}}>\n              {piece ? <div style={{backgroundColor: piece.player, flex: 1, borderRadius: '50%', border: \"1px solid #000\"}} /> : undefined}\n            </div>\n          </div>\n        );\n      }\n      rowViews.push(\n        <div style={{ display: 'flex', flexDirection: 'row'}}>{columnViews}</div>\n      );\n    }\n      return(//after winner is set, reset board\n        <div style={{backgroundColor: 'red', display: 'flex', flexDirection: 'column'}}>\n          {winner && <div onClick={this.resetBoard} style = {{position: \"absolute\", left: 0, right: 0, top: 0, bottom: 0, zIndex: 3 ,backgroundColor: `${winner}`, display: \"flex\", justifyContent: \"center\", alignItems: \"center\", fontSize: \"5vw\"}}> {`${winner} wins!! Click anywhere to reset the board.`}</div>}\n          {rowViews}\n        </div>\n      );\n    \n  }\n\n  render() {\n    const {style} = this.props;\n\n    return (\n      <div style = {style? Object.assign({}, styles.container, style) : styles.container}>\n        <div>\n          {this.renderBoard()}\n        </div>\n      </div>\n    );\n\n  }\n\n}\n\nconst styles = {\n  container: {\n    height: \"100%\",\n    pading: 5,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}